"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Query @middleware(checks: ["auth:api"]){
    users: [User!]! @all
    user(id: ID @eq): User @find

    townships: [Townships!]! @all

    states: [States!]! @all

    categories: [Category!]! @all

    product(id: ID @eq): Products @find

    products: [Products!]! @all
}

extend type Query {
    emailuser(email: String @eq): User @find

    businesscat: [BusinessCategory!]! @all
}

type Mutation {
	login(email: String, phone: String, password: String): User @field(resolver: "AuthMutator@login")

	signup(
        name: String
        business_name: String
        business_cat_id: String
        phone: String
        email: String
        password: String @hash
        township_id: Int
        state_id: Int
        address: String
    ): User @field(resolver: "AuthMutator@signup")

     gmail_signup(
        name: String
        business_name: String
        business_cat_id: String
        phone: String
        email: String
        township_id: Int
        state_id: Int
        address: String
        api_token:String
    ): User @field(resolver: "AuthMutator@gmail_signup")
    

    }

  extend  type Mutation @middleware(checks: ["auth:api"]){

    createProduct(name: String, category_id: Int, stock: Int, buy_price: Int, sell_price: Int, discount_price: Int, sku: String, barcode: String, is_damaged: Int, remark: String): Products @create

    updateProduct(id:ID,name: String, category_id: Int, stock: Int, buy_price: Int, sell_price: Int, discount_price: Int, sku: String, barcode: String, is_damaged: Int, remark: String): Products @update

    deleteProduct(id: ID!): Products @delete

    createCategory(name: String): Category @create
    updateCategory(id:ID,name: String): Category @update
     deleteCategory(id: ID!): Category @delete
    createOrder(input: CreateOrderInput @spread): Orders @create

}

input CreateOrderInput {
  total: Int
  order_date:String
 orderdetails: CreateDetailBelongsToMany
}

input CreateDetailBelongsToMany {
  create: [CreateDetailInput!]
  
}

input CreateDetailInput {
  product_id:Int
  qty:Int
  price:Int
}

type User {
    id: ID!
    name: String!
    business_name: String
    phone: String
    business_cat_id: String
    state_id: Int
    township_id: Int
    email: String!
    password:String
    address: String
    remember_token:String
    api_token:String
    created_at: DateTime!
    updated_at: DateTime!
}

type BusinessCategory{
    id: ID
    name: String
    created_at: DateTime
    updated_at: DateTime
}

type States{
    id: ID
    name: String
    created_at: DateTime
    updated_at: DateTime
}

type Townships{
    id: ID
    name: String
    created_at: DateTime
    updated_at: DateTime
}

type Products{
    id: ID
    name: String
    category_id: Int
    stock: Int
    buy_price: Int
    sell_price: Int
    discount_price: Int
    sku: String
    barcode: String
    is_damaged: Int
    remark: String
    category: Category @belongsTo
    created_at: DateTime
    updated_at: DateTime
}

type Category{
    id: ID
    name: String
    created_at: DateTime
    updated_at: DateTime
}

type Orders{
    id: ID
    total: Int
    order_date: String
    orderdetails: [OrderDetails] @hasMany
    created_at: DateTime
    updated_at: DateTime
}

type OrderDetails{
    id: ID
    orders_id: Int
    product_id:Int
    qty:Int
    price:Int
    order: Orders @belongsTo
    created_at: DateTime
    updated_at: DateTime
}
